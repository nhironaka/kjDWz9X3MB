@use 'sass:map';
@use 'sass:math';

@import 'theme';
@import 'tokens';

$joiner: '-';

@function interpolate($strings) {
  @if (length($strings) > 1) {
    $res: #{nth($strings, 1)};
    @for $i from 1 to length($strings) {
      $res: #{$res + '-' + nth($strings, $i + 1)};
    }

    @return $res;
  }

  @return $strings;
}

@mixin generate-class($property-meta, $styles...) {
  $property: nth($property-meta, 1);

  @each $style in $styles {
    $style-name: interpolate($style);
    .#{$property}-#{$style-name} {
      #{$property}: $style;
    }
  }
}

@mixin generate-from-map($style, $map, $properties...) {
  @each $name, $value in $map {
    @each $property in $properties {
      .#{$style}-#{$name} {
        #{$property}: $value;
      }
    }
  }
}

@mixin generate-from-map-multi($style, $map, $properties...) {
  @each $name, $value in $map {
    .#{$style}-#{$name} {
      @each $property in $properties {
        #{$property}: $value;
      }
    }
  }
}

@mixin generate-percentiles($style, $percentiles...) {
  @each $percentile in $percentiles {
    .#{$style}-#{$percentile} {
      #{$style}: math.percentage(math.div($percentile, 100));
    }
  }
}

@mixin generate-grid($property, $num-columns) {
  @for $i from 0 to $num-columns {
    @each $name, $value in $spacing {
      .#{$property}-#{$i}-#{$name} {
        #{$property}: repeat($i, minmax($value, 1fr));
      }
    }
  }
}

@mixin generate-border($border-properties, $border-styles) {
  @each $property in $border-properties {
    @each $border-style in $border-styles {
      @for $i from 1 to 12 {
        .#{$property}-#{$i}px-#{$border-style} {
          #{$property}-width: #{$i}px;
          #{$property}-style: $border-style;
        }
      }
    }
  }
}
